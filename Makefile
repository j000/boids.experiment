# ----------------------------------------------------------------------------
# CMake project wrapper Makefile
# ----------------------------------------------------------------------------
# Heavily modified, original version
# from: https://code.google.com/archive/p/cpp-project-template/
# lincensed under BSD-3 License http://opensource.org/licenses/BSD-3-Clause
# ----------------------------------------------------------------------------

SHELL := /bin/sh
RM ?= rm -f # should be default
RM += --recursive
MKDIR ?= mkdir
MKDIR += -p
RMDIR ?= rmdir
RMDIR += --ignore-fail-on-non-empty
CMAKE ?= cmake
BUILDDIR ?= build
TOOL ?=
DEBUG :=
SILENT :=
ifeq ($(findstring s,$(MAKEFLAGS)),s)
	SILENT := >/dev/null
endif

# reset to empty
.SUFFIXES:

.PHONY: all
all: $(BUILDDIR)/boids

.PHONY: just-exe
just-exe: | $(BUILDDIR)/boids .clean-cmake

# build exe
$(BUILDDIR)/boids: $(BUILDDIR)/Makefile
	$(MAKE) -C $(BUILDDIR)
	@touch $(BUILDDIR)/boids # to prevent further rebuilding

# run cmake to create makefile
$(BUILDDIR)/Makefile:
	[ -d $(BUILDDIR) ] || $(MKDIR) $(BUILDDIR);\
	cd $(BUILDDIR) && $(CMAKE) .. $(DEBUG) $(SILENT)

# define DEBUG, forcefully build exe
.PHONY: debug
debug: DEBUG := -DCMAKE_BUILD_TYPE=Debug
debug: ./$(BUILDDIR)/boids
#debug: | .force ./$(BUILDDIR)/boids

# forcefully build exe
.PHONY: .force
.force:
	@-$(RM) $(BUILDDIR)/Makefile
# try grep: DDEBUG -> build/src/CMakeFiles/boids.dir/flags.make

# clean all
.PHONY: distclean
distclean: | $(BUILDDIR)/Makefile .my-clean .clean-cmake

# simply clean does not work as dependency
.PHONY: .my-clean
.my-clean:
	$(MAKE) -C $(BUILDDIR) clean

.PHONY: .clean-cmake
.clean-cmake:
	$(RM) $(BUILDDIR)/CMakeCache.txt
	$(RM) $(BUILDDIR)/CMakeFiles
	$(RM) $(BUILDDIR)/cmake_install.cmake
	$(RM) $(BUILDDIR)/Makefile
# go into subdirectory
	$(RM) $(BUILDDIR)/src/CMakeFiles
	$(RM) $(BUILDDIR)/src/cmake_install.cmake
	$(RM) $(BUILDDIR)/src/Makefile
	$(RM) $(BUILDDIR)/src/version.c
# remove subdirectory if empty
	@- $(RMDIR) $(BUILDDIR)/src
# remove directory if empty
	@- $(RMDIR) $(BUILDDIR)

# run our executable
# you can specify TOOL to run
.PHONY: run
run: $(BUILDDIR)/boids
	@$(TOOL) ./$(BUILDDIR)/boids

# run valgrind
# TOOL=valgrind make run
.PHONY: .valgrind
.valgrind: TOOL := valgrind
.valgrind: run

# run kdbg
# TOOL=kdbg make run
.PHONY: .kdbg
.kdbg: TOOL := kdbg
.kdbg: run

# if not our command, run make inside directory
# what means use Makefiles generated by cmake
ifeq (,$(filter $(MAKECMDGOALS), \
$(BUILDDIR)/boids $(BUILDDIR)/Makefile debug .force all just-exe \
distclean .my-clean .clean-cmake \
run .valgrind .kdbg))

.PHONY: $(MAKECMDGOALS)
$(MAKECMDGOALS): $(BUILDDIR)/Makefile
	@echo "Using catch-all"
	@$(MAKE) -C $(BUILDDIR) $(MAKECMDGOALS)

endif
